//
//  emsAPIHelper.m
//  Fishy
//
//  Created by Roman Bigun on 1/6/15.
//  Copyright (c) 2015 Roman Bigun. All rights reserved.
//
//

#warning This class should be refactored. And AFNetworking should be used for every request

#import "emsAPIHelper.h"
#import "serverconstants.h"
#import "dbconstants.h"
#import "UserDataManager.h"
#import "ABStoreManager.h"
#import "SettingsManager.h"
#import "emsGlobalLocationServer.h"
#import "UIAlertView+showMessage.h"
#import "FBHelper.h"
////#import "emsLoginVC.h"
#define SECRET @"94a08da1fecbb6e8b46990538c7b50b2"
#define USER_PASSWORD [[NSUserDefaults standardUserDefaults] valueForKey:@"PASSWORD"]
#define USER_TOKEN [[NSUserDefaults standardUserDefaults] objectForKey:@"user_token"]
@implementation emsAPIHelper
{
    
    NSDictionary *profile;
    
}
-(id)init
{
    self = [super init];
    if(!self){
        return nil;
    }
    ////[Flurry setDelegate:self];
    return self;
    
}
+ (emsAPIHelper *)sharedInstance
{
    
    static emsAPIHelper * _sharedInstance = nil;
    static dispatch_once_t oncePredicate;
    dispatch_once(&oncePredicate, ^{
        _sharedInstance = [[emsAPIHelper alloc] init];
        
    });
    return _sharedInstance;
}
#pragma mark USER
/*!
 * @discussion  Login to server to create GOST user
 * @param 'token' token generated by the server for temporary use
 * @param 'userId' facebook ID
 */
-(void)loginToServerWithFacebookToken:(NSString*)token andUserID:(NSString*)userId
{
   //[Flurry logEvent:@"Api Call : loginToServerWithFacebookToken"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestUserRegister]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"fbToken=%@&",token];
    requestFields = [requestFields stringByAppendingFormat:@"fbId=%@",userId];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    
    if (error == nil && response.statusCode == 200)
    {
        [[UserDataManager sharedManager] saveFacebookToken:token];
        [[UserDataManager sharedManager] saveFacebookUserId:userId];
        [[UserDataManager sharedManager] saveRestApiToken:[NSString stringWithFormat:@"%@",
                                                           [(NSDictionary*)[responseString JSONValue]
                                                            objectForKey:@"restToken"]]];
        [[UserDataManager sharedManager] saveUser:[(NSDictionary*)[responseString JSONValue] objectForKey:@"user"]];
        
        
        NSLog(@"User Saved with server info\n%@",[[UserDataManager sharedManager] getSavedUser]);
        
        
    }
    else
    {
    
        [UIAlertView showAlertWithMessage:[NSString stringWithFormat:@"Something went wrong!Try again later.\n%@",error.description]];
    
    }
    
}
/*!
 * @discussion  Set primary interests of the user
 * @param 'nterestId id of the interest a user would like to set as his
 * primary interest
 */
-(void)setPrimaryInterest:(NSString*)interestId
{
    //[Flurry logEvent:@"Api Call : setPrimaryInterest"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestSetPrimaryInterest]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"interestId=%@",interestId];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        
        NSLog(@"Interest saved with data\n%@",responseString);
        
        
    }
    
    
    
    
}
/*!
 * @discussion  Generate unix time from NSDate
 * @param date income date to convert
 * @return date as a string
 */
-(NSString *)unixTimeInString:(NSDate*)date
{
    long long milliseconds = (long long)([[NSDate date] timeIntervalSince1970]);
    NSString *strTimeStamp = [NSString stringWithFormat:@"%lld",milliseconds];
    NSLog(@"The Timestamp is = %@",strTimeStamp);
    return strTimeStamp;
    
}
/*!
 * @discussion  save custom (new created) interest to a server
 * @param 'data' consist of name and image blob
 */
-(void)addInterestWithData:(NSDictionary *)data
{
   // //[Flurry logEvent:@"Api Call : addInterestWithData"];
    static NSString * const boundary = @"9m6dnw5z3dxxyhgfc2zc";
    NSString *contentType = [NSString stringWithFormat:@"multipart/form-data; boundary=%@", boundary];
    NSMutableData *body = [NSMutableData data];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestUserInterests]];
    NSMutableURLRequest *photoUploadRequest = [[NSMutableURLRequest alloc] initWithURL:url];
    photoUploadRequest.HTTPMethod = @"POST";
    [photoUploadRequest addValue:contentType forHTTPHeaderField:@"Content-Type"];
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name = \"media\";\r\nfilename=\"media_%u.png\"\r\n\r\n",
                       arc4random()%10000000] dataUsingEncoding:NSUTF8StringEncoding]];
    //Adding image
    UIImage *image = [data objectForKey:kUDKUserInfoAvatarFile];
    NSData* imdata = UIImagePNGRepresentation(image);
    [body appendData:imdata];
    //////////////
    
    
    for (NSString *key in data.allKeys)
    {
        [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
        [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"\r\n\r\n%@", key, data[key]] dataUsingEncoding:NSUTF8StringEncoding]];
    }
    
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@--\r\n",boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    photoUploadRequest.HTTPBody = body;
    
    
    [photoUploadRequest addValue:@(body.length).stringValue forHTTPHeaderField: @"Content-Length"];
    NSHTTPURLResponse *photoRequestResponse = nil;
    NSError *photoRequestError = nil;
    
    NSData *res = [NSURLConnection sendSynchronousRequest:photoUploadRequest
                                        returningResponse:&photoRequestResponse
                                                    error:&photoRequestError];
    
    
    
    NSString *response = [[NSString alloc] initWithData:res encoding:NSUTF8StringEncoding];
    NSLog(@"Adding interests response: %@", response);
    
    if([(NSDictionary*)[response JSONValue] objectForKey:@"newInterestId"] )
    {
       if ([[ABStoreManager sharedManager] editProfileMode]) {
            [[ABStoreManager sharedManager] setNewAddedInrerestID:[(NSDictionary*)[response JSONValue] objectForKey:@"newInterestId"] ];
            
        }
        else
        {
        
            [[NSUserDefaults standardUserDefaults] setObject:[(NSDictionary*)[response JSONValue] objectForKey:@"newInterestId"] forKey:@"newInterestId"];
            [[NSUserDefaults standardUserDefaults] synchronize];
        
        }
            
    }
    
    
}
/*!
 * @discussion  resizes image
 * @param image image to resize
 * @param wdth wanted width
 * @param hght wanted height
 */
-(UIImage *)resizeImage:(UIImage *)image width:(int)wdth height:(int)hght{
    int w = image.size.width;
    int h = image.size.height;
    CGImageRef imageRef = [image CGImage];
    int width, height;
    int destWidth = wdth;
    int destHeight = hght;
    if(w > h){
        width = destWidth;
        height = h*destWidth/w;
    }
    else {
        height = destHeight;
        width = w*destHeight/h;
    }
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef bitmap;
    bitmap = CGBitmapContextCreate(NULL, width, height, 8, 4 * width, colorSpace, kCGImageAlphaPremultipliedFirst);
    
    if (image.imageOrientation == UIImageOrientationLeft) {
        
        CGContextRotateCTM (bitmap, M_PI/2);
        CGContextTranslateCTM (bitmap, 0, -height);
        
    } else if (image.imageOrientation == UIImageOrientationRight) {
        
        CGContextRotateCTM (bitmap, -M_PI/2);
        CGContextTranslateCTM (bitmap, -width, 0);
        
    }
    else if (image.imageOrientation == UIImageOrientationUp) {
        
    } else if (image.imageOrientation == UIImageOrientationDown) {
        
        CGContextTranslateCTM (bitmap, width,height);
        CGContextRotateCTM (bitmap, -M_PI);
    }
    
    CGContextDrawImage(bitmap, CGRectMake(0, 0, width, height), imageRef);
    CGImageRef ref = CGBitmapContextCreateImage(bitmap);
    UIImage *result = [UIImage imageWithCGImage:ref];
    CGContextRelease(bitmap);
    CGImageRelease(ref);
    
    return result;
    
}
/*!
 * @discussion  Register user
 */
-(void)registerUser
{
    //[Flurry logEvent:@"Api Call : registerUser"];
    static NSString * const boundary = @"9m6dnw5z3dxxyhgfc2zc";
    NSString *contentType = [NSString stringWithFormat:@"multipart/form-data; boundary=%@", boundary];
    NSMutableData *body = [NSMutableData data];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestUpdateUser]];
    NSMutableURLRequest *photoUploadRequest = [[NSMutableURLRequest alloc] initWithURL:url];
    photoUploadRequest.HTTPMethod = @"POST";
    [photoUploadRequest addValue:contentType forHTTPHeaderField:@"Content-Type"];
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name = \"media\";\r\nfilename=\"media_%u.png\"\r\n\r\n",
                       arc4random()%10000000] dataUsingEncoding:NSUTF8StringEncoding]];
    //Adding image
    UIImage *image = [[UserDataManager sharedManager] registrationInfo][kUDKUserInfoAvatarFile];
    
    NSData* imdata = UIImagePNGRepresentation([self resizeImage:image width:800 height:600]);
    [body appendData:imdata];
    //////////////
    
    for (NSString *key in [[UserDataManager sharedManager] registrationInfo].allKeys)
    {
        [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
        [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"\r\n\r\n%@", key, [[UserDataManager sharedManager] registrationInfo][key]] dataUsingEncoding:NSUTF8StringEncoding]];
    }
    
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@--\r\n",boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    photoUploadRequest.HTTPBody = body;
    
    
    [photoUploadRequest addValue:@(body.length).stringValue forHTTPHeaderField: @"Content-Length"];
    NSHTTPURLResponse *photoRequestResponse = nil;
    NSError *photoRequestError = nil;
    
    NSData *res = [NSURLConnection sendSynchronousRequest:photoUploadRequest
                                        returningResponse:&photoRequestResponse
                                                    error:&photoRequestError];
    
    
    
    NSString *response = [[NSString alloc] initWithData:res encoding:NSUTF8StringEncoding];
    NSLog(@"User Register Response data: %@", response);
    if (photoRequestError == nil)
    {
        
        if([[(NSDictionary*)[response JSONValue] objectForKey:@"user"] count]>0)
        {
            [[UserDataManager sharedManager] saveUserToDefaults:[(NSDictionary*)[response JSONValue] objectForKey:@"user"]];
            [[NSUserDefaults standardUserDefaults] setValue:
             [(NSDictionary*)[response JSONValue] objectForKey:@"user"][@"uId"]
                                                                forKey:@"myid"];
        }
        
    }
    
    
}
/*!
 * @discussion  Update activity with edited data
 */
-(void)postUpdateActivities
{
    //[Flurry logEvent:@"Api Call : postUpdateActivities"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestUpdateExistedActivity]];
    NSMutableURLRequest *photoUploadRequest = [[NSMutableURLRequest alloc] initWithURL:url];
    [photoUploadRequest setHTTPMethod:@"POST"];
    [photoUploadRequest addValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [photoUploadRequest addValue:@"application/json" forHTTPHeaderField:@"Accept"];
    NSError *error=nil;
    NSData* jsonData = [NSJSONSerialization dataWithJSONObject:[[ABStoreManager sharedManager] editingActivityObject]
                                                       options:NSJSONWritingPrettyPrinted error:&error];
    NSString *srt = [[NSString alloc] initWithData:jsonData
                                          encoding:NSUTF8StringEncoding];
    NSLog(@"Update Activity JSON String %@",srt);
    NSURLSession *session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];
    NSURLSessionUploadTask *task = [session uploadTaskWithRequest:photoUploadRequest
                                                         fromData:jsonData completionHandler:^(NSData *data, NSURLResponse *response, NSError *error)
                                    {
                                        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];
                                        NSLog(@"%@", json);
                                        [[ABStoreManager sharedManager] flushData];
                                        [[ABStoreManager sharedManager] setEditProfileMode:NO];
                                        [[ABStoreManager sharedManager] setModeEditing:NO];
                                        [[NSNotificationCenter defaultCenter] postNotificationName:@"ActivityCreated"
                                                                                            object:self
                                                                                          userInfo:nil];
                                        
                                        
                                    }];
    [task resume];

}
/*!
 * @discussion  Save activity on the server after createon
 */
-(void)saveActivity
{
    //[Flurry logEvent:@"Api Call : saveActivity"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestAddUserActivity]];
    NSMutableURLRequest *photoUploadRequest = [[NSMutableURLRequest alloc] initWithURL:url];
    [photoUploadRequest setHTTPMethod:@"POST"];
    [photoUploadRequest addValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [photoUploadRequest addValue:@"application/json" forHTTPHeaderField:@"Accept"];
    
    NSError *error=nil;
    
    
    NSLog(@"%@",[[ABStoreManager sharedManager] ongoingActivity]);
    NSData* jsonData = [NSJSONSerialization dataWithJSONObject:[[ABStoreManager sharedManager] ongoingActivity]
                                                       options:NSJSONWritingPrettyPrinted error:&error];
    NSString *srt = [[NSString alloc] initWithData:jsonData
                                          encoding:NSUTF8StringEncoding];
    
    NSLog(@"JSON String %@",srt);
    
    NSURLSession *session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];
    NSURLSessionUploadTask *task = [session uploadTaskWithRequest:photoUploadRequest
                                                         fromData:jsonData completionHandler:^(NSData *data, NSURLResponse *response, NSError *error)
                                    {
                                        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];
                                        NSLog(@"%@", json);
                                        [[ABStoreManager sharedManager] flushData];
                                        [[ABStoreManager sharedManager] setModeEditing:NO];
                                        [[NSNotificationCenter defaultCenter] postNotificationName:@"ActivityCreated"
                                                                                            object:self
                                                                                          userInfo:nil];
                                    }];
    [task resume];
    
}
/*!
 * @discussion  Update user location with current data
 */
-(void)updateLocations:(NSString *)lat lng:(NSString *)lng
{
    //[Flurry logEvent:@"Api Call : updateLocations"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestUpdateLocation]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"lat=%@&",lat];
    requestFields = [requestFields stringByAppendingFormat:@"lng=%@",lng];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        NSLog(@"Location updated \n%@",responseString);
    }


}
/*!
 * @discussion  Remove self from the server. User removes his own profile from Scadaddle.
 */
-(void)removeUser
{
    //[Flurry logEvent:@"Api Call : removeUser"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestRemoveUser]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@",[[UserDataManager sharedManager] serverToken]];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        
        NSLog(@"User removed with response \n%@",responseString);
        
        
    }
    
    
}
/*!
 * @discussion  Saves Settings data after editing
 */
-(void)saveSettings
{
    //[Flurry logEvent:@"Api Call : saveSettings"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestAddUserSettings]];
    NSMutableURLRequest *photoUploadRequest = [[NSMutableURLRequest alloc] initWithURL:url];
    [photoUploadRequest setHTTPMethod:@"POST"];
    [photoUploadRequest addValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [photoUploadRequest addValue:@"application/json" forHTTPHeaderField:@"Accept"];
    
    NSError *error=nil;
    NSData* jsonData = [NSJSONSerialization dataWithJSONObject:[[SettingsManager sharedManager] ongoingSettings]
                                                       options:NSJSONWritingPrettyPrinted error:&error];
    NSString *srt = [[NSString alloc] initWithData:jsonData
                                          encoding:NSUTF8StringEncoding];
    
    NSLog(@"JSON String %@",srt);
    
    NSURLSession *session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];
    NSURLSessionUploadTask *task = [session uploadTaskWithRequest:photoUploadRequest
                                                         fromData:jsonData completionHandler:^(NSData *data, NSURLResponse *response, NSError *error)
                                    {
                                        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];
                                        NSLog(@"Settings: %@", json);
                                        
                                        
                                    }];
    [task resume];
    
}
/*!
 * @return primary interest path
 */
-(NSString *)primaryInterest
{
    
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@",
                     kServerMainPath,
                     kRequestGetPrimaryInterest,
                     [[UserDataManager sharedManager] serverToken]];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSString *res = (NSString *)[responseString JSONValue][@"interest"][@"file"][@"filepath"];
//    [[ABStoreManager sharedManager] addData:[NSString stringWithFormat:@"%@",(NSString *)[responseString JSONValue][@"interest"][@"id"]] forKey:@"primaryInterest"];
    NSLog(@"Primary Interest : \n%@",res);
    return res;
    
}
/*!
 * @discussion  Updates device token. This token uses for push notifications
 */
-(void)updateDeviceTokenForPushNotifications:(NSString*)deviceToken
{
    //[Flurry logEvent:@"Api Call : updateDeviceTokenForPushNotifications"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestUpdateDeviceToken]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"deviceToken=%@&",deviceToken];
    requestFields = [requestFields stringByAppendingFormat:@"os=%@",@"ios"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        
        NSLog(@"Device token updated! \n%@",responseString);
        
    }
}
/*!
 * @return Settings data stored on the server
 */
-(NSDictionary *)getSettings
{
    //[Flurry logEvent:@"Api Call : getSettings"];
    NSString *req = [NSString stringWithFormat:@"%@/%@?restToken=%@",
                     kServerMainPath,
                     kRequestGetSettings,
                     [[UserDataManager sharedManager] serverToken]];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSDictionary *res = [(NSDictionary *)[responseString JSONValue][@"settings"] isKindOfClass:[NSDictionary class]]?(NSDictionary *)[responseString JSONValue][@"settings"]:[NSDictionary dictionary];
    NSLog(@"Settings : \n%@",res);
    return res;
    
}
/*!
 * @discussion  Get user profile
 * @param 'userId' id for the user you want to get user information
 */
-(NSDictionary *)profile:(NSString*)userId
{
     //[Flurry logEvent:@"Api Call : profile"];
    NSString *req = [NSString stringWithFormat:@"%@%@/%@?restToken=%@",
                     kServerMainPath,
                     kRequestUserProfile,
                     userId,
                     [[UserDataManager sharedManager] serverToken]];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSDictionary *res = [NSDictionary new];
    res = (NSDictionary *)[responseString JSONValue][@"user"];
    NSLog(@"Prifile : \n%@",res);
    return res;
    
}
/*!
 * @return Notebook list of all users (followers/following/icebreakers/friends/blocked)
 * @param 'data' consist of separated params for search
 */
-(NSDictionary *)notebookMainPage:(NSDictionary*)data
{
    //[Flurry logEvent:@"Api Call : notebookMainPage"];
    NSString *strText = [data[@"text"] isKindOfClass:[NSString class]]?data[@"text"]:@"";
    
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&limitFrom=%@&limitTo=%@&lat=%@&lng=%@&search=%@",
                     kServerMainPath,
                     data[@"target"],
                     [[UserDataManager sharedManager] serverToken],
                     data[@"limitFrom"],
                     data[@"limitTo"],
                     data[@"lat"],
                     data[@"lng"],
                     strText];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    NSDictionary *res = (NSDictionary *)[responseString JSONValue];
    NSLog(@"Notebook[MainPage] Users: \n%@",res);
    return [res isKindOfClass:[NSDictionary class]]?res:[NSDictionary dictionary];
    
}
/*!
 * @return success (bool)
 * @param 'aId' ID of Activity to remove
 */
-(BOOL)removeActivity:(NSString*)aId
{
    //[Flurry logEvent:@"Api Call : removeActivity"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestRemoveActivity]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"aId=%@",aId];
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        
        
        NSLog(@"Activity  \n%@",responseString);
        return YES;
       
        
        
    }
    
    return NO;
    

}
/*!
 * @discussion get filtered Activities list
 * @param 'type' type of Activity
 * @param 'orderBy' name/date etc
 * @param 'direction' asc/desc
 */
-(NSDictionary *)getActivitiesByType:(NSString*)type orderBy:(NSString*)order andDirection:(NSString*)direction
{
    //[Flurry logEvent:@"Api Call : getActivitiesByType"];
    NSString *req = [NSString stringWithFormat:@"%@/%@?restToken=%@&LimitFrom=0&limitTo=100&lat=%@&lng=%@&orderBy=%@&orderDirection=%@&timeZone=%@",
                     kServerMainPath,
                     type,
                     [[UserDataManager sharedManager] serverToken],
                     [[emsGlobalLocationServer sharedInstance] latitude],
                     [[emsGlobalLocationServer sharedInstance] longitude],
                     order,
                     direction,
                     [[NSTimeZone localTimeZone] name]];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSDictionary *res = [NSDictionary new];
    res = (NSDictionary *)[responseString JSONValue];
    NSLog(@"My Activities Dic: \n%@",res);
    
    return res;
    
}
/*!
 * @return Activity list for particular user (own activities)
 * @param 'userId'
 */
-(NSArray *)activities:(NSString*)userId
{
    //[Flurry logEvent:@"Api Call : activities"];
    NSString *req = [NSString stringWithFormat:@"%@%@/%@?restToken=%@",
                     kServerMainPath,
                     kRequestUserProfile,
                     userId,
                     [[UserDataManager sharedManager] serverToken]];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"activitiesImages"];
    NSLog(@"Activities : \n%@",res);
    
    return res;
    
}
/*!
 * @discussion Send to a server phone number which has been already verifyed by Sinch
 * @param 'phoneNumber' number to store
 */
-(BOOL)phoneVerifyed:(NSString*)phoneNumber
{
    //[Flurry logEvent:@"Api Call : phoneVerifyed"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestPhoneVerification]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"phone=%@",phoneNumber];
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        NSLog(@"Verifyed %@",responseString);
        
        return YES;
    }
    
    return NO;
}
/*!
 * @return: List of Videos fro Youtube channel
 * @params 'maxResult' max count of objects to be returned
 */
-(NSArray*)youtubeVideo:(int)maxResult
{
    GPlusHelper *gph = [[GPlusHelper alloc] init];
    if([gph GPlusOAuthToken]==nil)
    {
    
        [gph googlePlusLogin];
    
    }
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&accessToken=%@",
                     kServerMainPath,
                     kRequestUserYoutubeVideo,
                     [[UserDataManager sharedManager] serverToken],[gph GPlusOAuthToken]];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"videos"];
    NSLog(@"Youtube videos : \n%@",res);
    
    if(res.count==0)
       [[[UIAlertView alloc] initWithTitle:@"Youtube" message:@"Please, login in first in Settings tab" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil] show];
    
    return res;
    
}
/*!
 * @return Facebook pages at Promotion process
 */
-(NSArray*)facebookPages
{
     //[Flurry logEvent:@"Api Call : facebookPages"];
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@",
                     kServerMainPath,
                     kRequestUserFacebookAccounts,
                     [[UserDataManager sharedManager] serverToken]];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"accounts"];
    NSLog(@"FB Pages : \n%@",res);
    
    return res;

}
/*!
 * @return Notifications list
 */
-(NSArray *)notifications:(NSString*)where
{
    //[Flurry logEvent:@"Api Call : notifications"];
    NSString *req = [NSString stringWithFormat:@"%@%@%@?restToken=%@",
                     kServerMainPath,
                     kRequestUserNotifications,
                     where,
                     [[UserDataManager sharedManager] serverToken]];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"notifications"];
    NSLog(@"Notifications : \n%@",res);
    
    return res;
    
}

#pragma mark ACTIONS
/*!
 * @discussion  removes notification which has already been seen by the user
 * @param nId Notification ID to remove
 */
-(void)removeNotification:(NSString*)nId callback:(void (^)())callback{
    
    //[Flurry logEvent:@"Api Call : removeNotification"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestRemoveNotification]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    if(nId.length>0)
        requestFields = [requestFields stringByAppendingFormat:@"nId=%@",nId];
    else
    requestFields = [requestFields stringByAppendingFormat:@"all=1"];

    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    
    if (error == nil && response.statusCode == 200)
    {
        NSLog(@"%@",responseString);
        [[NSNotificationCenter defaultCenter] postNotificationName:@"EMSNotificationCountChanged"
                                                            object:self
                                                          userInfo:@{@"notifCounter":@"0"}];
        callback();
    }
}
/*!
 * @discussion  Accept user membership request
 * @param aId desired Activity
 * @param uId user which sent request
 */
-(void)acceptMember:(NSString*)aId andUserId:(NSString*)uId type:(BOOL)block callback:(void (^)())callback{
    
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestMemberAccept]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"aId=%@&",aId];
    requestFields = [requestFields stringByAppendingFormat:@"uId=%@&",uId];
    requestFields = [requestFields stringByAppendingFormat:block==YES?@"member=1":@"member=0"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    
    if (error == nil && response.statusCode == 200)
    {
        //[Flurry logEvent:@"Api Call : acceptMember"];
        callback();
    }
}
/*!
 * @discussion  Request to become a member of activity
 * @param aId desired Activity
 * @param uId user which sent request
 */
-(void)becomeAMember:(NSString*)aId andUID:(NSString*)uId type:(BOOL)block
{
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestBecomeAMember]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"aId=%@&",aId];
    requestFields = [requestFields stringByAppendingFormat:@"uId=%@&",uId];
    
    requestFields = [requestFields stringByAppendingFormat:block==YES?@"member=1":@"member=0"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
       //[Flurry logEvent:@"Api Call : becomeAMember"];
    }
}
/*!
 * @discussion  block/unblock friend
 * @param 'block' 1/0
 * @param 'userId' user wich will be blocked
 */
-(void)blockFriend:(NSString*)userId type:(BOOL)block callback:(void (^)())callback{
    
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestBlockUser]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"uId=%@&",userId];
    requestFields = [requestFields stringByAppendingFormat:block==YES?@"block=1":@"block=0"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        callback();
        //[Flurry logEvent:@"Api Call : blockFriend"];
    }
}

/*!
 * @discussion  delete user from Notebook
 * @param 'userId' user wich will be deleted
 */
-(void)deleteUser:(NSString*)userId callback:(void (^)())callback{
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestHideUsers]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"uId=%@&",userId];
    requestFields = [requestFields stringByAppendingFormat:@"hide=1"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
         NSLog(@"Follow activity respond \n%@",responseString);
        //[Flurry logEvent:@"Api Call : deleteUser"];
        callback();
    }
    
    NSLog(@"Remove from friend res %@",responseString);
}
/*!
 * @discussion  Follow user
 * @param 'userId' user wich I will follow
 */

-(void)followUser:(NSString*)userId callback:(void (^)())callback{
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestFollowUsers]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"uId=%@&",userId];
    requestFields = [requestFields stringByAppendingFormat:@"follow=1"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        //[Flurry logEvent:@"Api Call : followUser"];
        callback();
    }
    

}
/*!
 * @discussion  Add user to friends list
 * @param 'uId' user wich will be added to a friend list
 */
-(void)addFriend:(NSString*)uId status:(int)status
{
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestAddToMyFriend]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"uId=%@&",uId];
    requestFields = [requestFields stringByAppendingFormat:@"addFriend=%d",status];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        //[Flurry logEvent:@"Api Call : addFriend"];
        NSLog(@"Add friend %@",responseString);
    }
}
/*!
 * @discussion  request to be a friend
 * @param 'uId' id of recipient
 */
-(void)friendshipRequest:(NSString*)uId
{
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestNotebookFriendship]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"uId=%@&",uId];
    requestFields = [requestFields stringByAppendingFormat:@"request=1"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        NSLog(@"%@",responseString);
        //[Flurry logEvent:@"Api Call : friendshipRequest"];
    }
}
/*!
 * @discussion  request to be a friend
 * @param 'uId' id of recipient
 */

-(void)icebreakerRequest:(NSString*)uId
{
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestNotebookFriendship]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"uId=%@&",uId];
    requestFields = [requestFields stringByAppendingFormat:@"request=1"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        NSLog(@"%@",responseString);
        //[Flurry logEvent:@"Api Call : icebreakerRequest"];
    }
}
/*!
 * @discussion  Remove Activity
 * @param 'activityId' id of Activity to remove
 */
-(void)removeActivity:(NSString*)activityId callback:(void (^)())callback{
    
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestRemoveActivity]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"aId=%@",activityId];
   
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        //[Flurry logEvent:@"Api Call : removeActivity"];
        callback();
    }
}
/*!
 * @discussion  Hide Activity
 * @param 'activityId' id of Activity to hide
 */
-(void)hideActivity:(NSString*)activityId callback:(void (^)())callback{

    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestHideActivity]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"aId=%@&",activityId];
    requestFields = [requestFields stringByAppendingFormat:@"hide=1"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        //[Flurry logEvent:@"Api Call : hideActivity"];
        NSLog(@"Hide activity respond \n%@",responseString);
        callback();
    }
}
/*!
 * @discussion  Follow Activity
 * @param 'activityId' id of Activity to follow
 */
-(void)followActivity:(NSString*)activityId callback:(void (^)())callback{
    
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestFollowActivities]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"aId=%@&",activityId];
    requestFields = [requestFields stringByAppendingFormat:@"follow=1"];
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        //[Flurry logEvent:@"Api Call : followActivity"];
        NSLog(@"Follow activity respond \n%@",responseString);
        callback();
    }

}
/*!
 * @discussion  Unfollow Activity
 * @param 'activityId' id of Activity to unfollow
 */
-(void)unfollowActivity:(NSString*)activityId callback:(void (^)())callback{
    
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestHideActivity]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"aId=%@&",activityId];
    requestFields = [requestFields stringByAppendingFormat:@"hide=1"];
    
    
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        //[Flurry logEvent:@"Api Call : unfollowActivity"];
        NSLog(@"Follow activity respond \n%@",responseString);
        callback();
    }
    
}
-(NSArray *)interests:(NSString *)lat andLong:(NSString*)lng andGender:(NSString*)gender andStart:(NSString *)start andLimit:(NSString *)limit
{
  
    
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&limitFrom=%@&limitTo=%@&lat=%@&lng=%@&single=%@",
                     kServerMainPath,
                     kRequestInterests,
                     [[UserDataManager sharedManager] serverToken],
                     start,limit,
                     lat,lng, gender];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"distances"];
    NSLog(@"Interests : \n%@",res);
    return res;
    
    
}
/*!
 * @return: Activity object
 * @param 'aId' id of Activity which you would like to see/use/display
 * @param 'lat' Latitude
 * @param 'lng' Longitude
 */
-(NSDictionary *)activityDataForID:(NSString *)aId lat:(NSString*)lat andLong:(NSString*)lng
{
    
    
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&aId=%@&lat=%@&lng=%@",
                     kServerMainPath,
                     kRequestActivitiesProfile,
                     [[UserDataManager sharedManager] serverToken],
                     aId,lat,lng];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSDictionary *res = [NSDictionary new];
    res = (NSDictionary *)[responseString JSONValue];
    NSLog(@"Activity Data : \n%@",res);
    
    return res;
    
}
/*!
 * @return: List of Activities
 * @params coordinates/limitations
 */
-(NSArray *)activities:(NSString *)lat andLong:(NSString*)lng andStart:(NSString *)start andLimit:(NSString *)limit
{
    
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&limitFrom=%@&limitTo=%@&lat=%@&lng=%@",
                     kServerMainPath,
                     kRequestActivities,
                     [[UserDataManager sharedManager] serverToken],
                     start,limit,
                     lat,lng];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"distances"];
    NSLog(@"Activities : \n%@",res);
    return res;
    
    
}
/*!
 * @return: List of Rewards
 * @params coordinates/limitations
 */
-(NSArray *)rewards:(NSString *)lat andLong:(NSString*)lng andStart:(NSString *)start andLimit:(NSString *)limit
{
   
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&limitFrom=%@&limitTo=%@&lat=%@&lng=%@",
                     kServerMainPath,
                     kRequestRewards,
                     [[UserDataManager sharedManager] serverToken],
                      start,limit,
                     lat,lng];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"distances"];
    NSLog(@"Rewards : \n%@",res);
     //[Flurry logEvent:@"Api Call : rewards"];
    return res;
    
    
}
/*!
 * @return: List of Friends
 */
-(NSArray *)friends
{
    
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@",
                     kServerMainPath,
                     kRequestUserFriends,
                     [[UserDataManager sharedManager] serverToken]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"friends"];
    NSLog(@"Friends : \n%@",res);
    return res;
    
    
}
/*!
 * @return: List of Singles/Activities... [Social Radar]
 * @params coordinates/limitations
 */
-(NSArray *)mainPage:(NSString *)lat andLong:(NSString*)lng  andStart:(NSString *)start andLimit:(NSString *)limit
{
    
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&limitFrom=%@&limitTo=%@&lat=%@&lng=%@",
                     kServerMainPath,
                     kRequestUserActivities,
                     [[UserDataManager sharedManager] serverToken],
                      start,limit,
                     lat,lng];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"distances"];
    
    NSLog(@"Main Page Data : \n%@",res);
    
    if([(NSString*)[responseString JSONValue][@"errorCode"] integerValue]==103)//Server Token failed
    {
        if([self serverReloginProcess])
        {
        
            [self mainPage:lat andLong:lng andStart:start andLimit:limit];
        
        }
            
        
    }
    //[Flurry logEvent:@"Api Call : mainPage"];
    return res;
    
    
}
-(BOOL)serverReloginProcess
{

    if([self refreshToken])
    {
        return YES;
    }
    
    return NO;
}
-(BOOL)refreshToken
{
    
    NSDictionary *local = [[NSUserDefaults standardUserDefaults] objectForKey:@"local_user_info"];
    NSString *req = [NSString stringWithFormat:@"%@/register%@?fbId=%@&fbToken=%@",
                     kServerMainPath,
                     kRequestRefreshTokenAndUserExistance,
                     local[@"id"],[[NSUserDefaults standardUserDefaults] objectForKey:@"FBToken"]];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay];
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding];
   
    if([(NSString*)[responseString JSONValue][@"errorCode"] integerValue]==0 && ![responseString containsString:@"DOCTYPE"])
    {
    
        [[UserDataManager sharedManager] saveRestApiToken:(NSString*)[responseString JSONValue][@"restToken"]];
        //[Flurry logEvent:@"Api Call : refreshToken"];
        return YES;
    
    }
    return NO;

}
/*!
 * @return: List of Radar Entities
 * @params GEO coordinates
 */
-(NSArray *)mainPageFilters:(NSString *)lat andLong:(NSString*)lng
{
   
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&limitFrom=0&limitTo=100&lat=%@&lng=%@",
                     kServerMainPath,
                     kRequestUserActivities,
                     [[UserDataManager sharedManager] serverToken],
                     lat,lng];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
     //[Flurry logEvent:@"Api Call : mainPageFilters"];
     NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"distances"];
    NSLog(@"Main Page Filters : \n%@",res);
    return res;
    
    
}
/*!
 * @return: List of Cross Interests
 * @params 'aId' id of activity you want to get cross interests for
 */
-(NSArray *)crossInterestsActivities:(NSString *)aId
{
   
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&uId=%@",
                     kServerMainPath,
                     kRequestCrossInterests,
                     [[UserDataManager sharedManager] serverToken],
                     aId];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"interests"];
    NSLog(@"Cross Interests Activity : \n%@",res);
    return res;
    
    
}
/*!
 * @return: List of Cross Interests
 * @params 'uId' id of user you want to get cross interests for
 */
-(NSArray *)crossInterests:(NSString *)uId
{
   
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&uId=%@",
                     kServerMainPath,
                     kRequestCrossInterests,
                     [[UserDataManager sharedManager] serverToken],
                     uId];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"interests"];
    NSLog(@"Cross Activities : \n%@",res);
    return res;
    
    
}
-(NSArray *)events:(NSString *)userId
{
    //[Flurry logEvent:@"Api Call : events"];
    NSString *req = [NSString stringWithFormat:@"%@%@?userId=%@&connectionToken=%@&secretToken=%@",
                     kServerMainPath,
                     kRequestUserEvents,
                     userId,
                     USER_TOKEN,
                     SECRET];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"data"];
    NSLog(@"Events : \n%@",res);
    return res;
    
}
/*!
 * @return: List of Interests
 */
-(NSArray *)interests
{
     
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@",
                     kServerMainPath,
                     kRequestUserInterests,[[UserDataManager sharedManager] serverToken]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"interests"];
    
    return res;
    
}
/*!
 * @return: List of found interests during search
 * @params 'queryString' search string
 */
-(NSArray *)interestsSearchWithText:(NSString*)queryString
{
    //[Flurry logEvent:@"Api Call : interestsSearchWithText"];
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&search=%@",
                     kServerMainPath,
                     kRequestUserInterests,[[UserDataManager sharedManager] serverToken],queryString];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSArray *res = [NSArray new];
    res = (NSArray *)[responseString JSONValue][@"interests"];
    
    return res;
    
}
-(NSDictionary *)dreamshot:(NSString *)userId
{
    
    NSString *req = [NSString stringWithFormat:@"%@%@?userId=%@&connectionToken=%@&secretToken=%@",
                     kServerMainPath,
                     kRequestUserDreamshot,
                     userId,
                     USER_TOKEN,
                     SECRET];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSDictionary *res = [NSDictionary new];
    res = (NSDictionary *)[responseString JSONValue][@"data"];
    NSLog(@"dreamshot : \n%@",res);
    return res;
    
}
/*!
 * @return: User object
 * @params 'userID' id of user you want to get user info
 */
-(NSDictionary *)profileInfoandUserID:(NSString *)userID{
    //[Flurry logEvent:@"Api Call : profileInfoandUserID"];
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&uId=%@",
                     kServerMainPath,
                     kRequestProfile,
                     [[UserDataManager sharedManager] serverToken],
                     userID];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSDictionary *res = [NSDictionary new];
    res = (NSDictionary *)[responseString JSONValue][@"user"];
    NSLog(@"profileInfo : \n%@",res);
    
    return res;


}
// - postProfile Methods
-(void )postProfileInfoandUserID:(NSDictionary *)userData callback:(void (^)(NSDictionary *))callback{
  
//POST: restToken,[ name, age, aboutMe, gender(bool), file(jpg, png, gif), userInterests(1, 2, ...), activityInterests(1, 2, ...)] - interests ids, primaryInterest(id)

     //[Flurry logEvent:@"Api Call : postProfileInfoandUserID"];
    static NSString * const boundary = @"9m6dnw5z3dxxyhgfc2zc";
    NSString *contentType = [NSString stringWithFormat:@"multipart/form-data; boundary=%@", boundary];
    NSMutableData *body = [NSMutableData data];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestPostProfile]];
    NSMutableURLRequest *photoUploadRequest = [[NSMutableURLRequest alloc] initWithURL:url];
    photoUploadRequest.HTTPMethod = @"POST";
    [photoUploadRequest addValue:contentType forHTTPHeaderField:@"Content-Type"];
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];

    if ( [[userData objectForKey:@"file"] isKindOfClass:[NSArray class]]) {
        
        NSArray *arr = [userData objectForKey:@"file"] ;
        
        
          for (int i = 0 ; i<[arr count]; i++) {
            
            
            UIImage *image = [arr objectAtIndex:i];

            NSData *imageData = UIImageJPEGRepresentation(image,1);

            if (imageData) {
                [body appendData:[[NSString stringWithFormat:@"--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
                [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"file%u\"; filename=\"image.jpeg\"\r\n",i] dataUsingEncoding:NSUTF8StringEncoding]];
                [body appendData:[@"Content-Type: image/jpeg\r\n\r\n" dataUsingEncoding:NSUTF8StringEncoding]];
                [body appendData:imageData];
                [body appendData:[[NSString stringWithFormat:@"\r\n"] dataUsingEncoding:NSUTF8StringEncoding]];
            }
         
        }
    
    }
    else{


        UIImage *image = [userData objectForKey:@"file"];
        NSData *imageData = UIImageJPEGRepresentation(image,1);
        
        if (imageData) {
            [body appendData:[[NSString stringWithFormat:@"--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
            [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"file%u\"; filename=\"image.jpeg\"\r\n", arc4random()%10000000] dataUsingEncoding:NSUTF8StringEncoding]];
            [body appendData:[@"Content-Type: image/jpeg\r\n\r\n" dataUsingEncoding:NSUTF8StringEncoding]];
            [body appendData:imageData];
            [body appendData:[[NSString stringWithFormat:@"\r\n"] dataUsingEncoding:NSUTF8StringEncoding]];
        }

    }
    
    for (NSString *key in userData.allKeys)
    {
        [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
        [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"\r\n\r\n%@", key, userData[key]] dataUsingEncoding:NSUTF8StringEncoding]];
    }
    
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@--\r\n",boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    photoUploadRequest.HTTPBody = body;
    
    
    [photoUploadRequest addValue:@(body.length).stringValue forHTTPHeaderField: @"Content-Length"];
    NSHTTPURLResponse *photoRequestResponse = nil;
    NSError *photoRequestError = nil;
    
    NSData *res = [NSURLConnection sendSynchronousRequest:photoUploadRequest
                                        returningResponse:&photoRequestResponse
                                                    error:&photoRequestError];
    
    
    
    NSString *response = [[NSString alloc] initWithData:res encoding:NSUTF8StringEncoding];
    NSLog(@"Adding interests response: %@", response);
        if (photoRequestError == nil)
        {
            
            NSDictionary *rrr =[[response JSONValue] objectForKey:@"user"];
     
            if([[(NSDictionary*)[response JSONValue] objectForKey:@"user"] count]>0)
            {
                [[ABStoreManager sharedManager] editProfileDictiomary:[(NSDictionary*)[response JSONValue] objectForKey:@"user"]];
                callback(nil);
                
              //  [[UserDataManager sharedManager] saveUserToDefaults:[(NSDictionary*)[response JSONValue] objectForKey:@"user"]];
            }
    
        }
    

}
/*!
 * @discussion  sent info to the server about user online/offline state
 * @params 'isOnline' 1/0
 */
-(void)postUserOnline:(BOOL)isOnline
{
    //[Flurry logEvent:@"Api Call : postUserOnline"];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestPostUserOnline]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    NSLog(@"%@",[[UserDataManager sharedManager] serverToken]);
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"isOnline=%i",isOnline];
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        
        NSLog(@"Online? %@",responseString);
    
    
    }

    


}
/*!
 * @return: My own profile data
 */
-(NSDictionary *)profile{
   //[Flurry logEvent:@"Api Call : profile"];
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@",
                     kServerMainPath,
                     kRequestProfile,
                     [[UserDataManager sharedManager] serverToken]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    NSDictionary *res = [NSDictionary new];
    res = (NSDictionary *)[responseString JSONValue][@"user"];
   
    return res;
    
    
}
/*!
 * @return: List of Public Interests
 * @params geo coordinates
 */
-(NSArray *)publicInterests:(NSString *)start andLimit:(NSString *)limit
{
        //[Flurry logEvent:@"Api Call : publicInterests"];
    
        NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&limitFrom=%@&limitTo=%@",
                         kServerMainPath,
                         kRequestPublicInterests,
                         [[UserDataManager sharedManager] serverToken],
                         start,limit
                         ];
        NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                               cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                           timeoutInterval:kPfxNetworkDelay] ;
        
        [request setHTTPMethod: @"GET"];
        NSError *requestError;
        NSURLResponse *urlResponse = nil;
        
        NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
        NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
        NSArray *res = [NSArray new];
        res = (NSArray *)[responseString JSONValue][@"interests"];
        NSLog(@"publicInterests: \n%@",res);
        return res;
        

    
}

/*!
 * @return:Messages history
 */
-(void)getChat:(NSString *)userId callback:(void (^)(NSDictionary *))callback
{
    //[Flurry logEvent:@"Api Call : getChat"];
    NSString *req = [NSString stringWithFormat:@"%@%@?restToken=%@&uId=%@",
                     kServerMainPath,
                     kRequestChat,
                     [[UserDataManager sharedManager] serverToken],
                     userId];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSDictionary *res = [NSDictionary new];
    res = (NSDictionary *)[responseString JSONValue];
    NSLog(@"getChat : \n%@",res);
    
    callback(res);
    
}

-(BOOL)respond:(NSDictionary*)response
{

    return [[emsServerErrorHandler sharedInstance] checkSuccessfull:response];

}

/*!
 * @return:'isOnline' 1/0
 */
-(void)checkSendPush:(NSString *)userId callback:(void (^)(NSString *))callback{

    NSString *req = [NSString stringWithFormat:@"%@plugins/presence/status?jid=%@@scadjabber.gotests.com&type=xml",JAVA_SERVER,userId];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;

    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    callback(responseString);
}
//

-(void)sendImageToChat:(NSDictionary *)dictionary callback:(void (^)(NSString *))callback
{
    
    static NSString * const boundary = @"9m6dnw5z3dxxyhgfc2zc";
    NSString *contentType = [NSString stringWithFormat:@"multipart/form-data; boundary=%@", boundary];
    NSMutableData *body = [NSMutableData data];
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestChatImage]];
    NSMutableURLRequest *photoUploadRequest = [[NSMutableURLRequest alloc] initWithURL:url];
    photoUploadRequest.HTTPMethod = @"POST";
    [photoUploadRequest addValue:contentType forHTTPHeaderField:@"Content-Type"];
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name = \"media\";\r\nfilename=\"media_%u.png\"\r\n\r\n",
                       arc4random()%10000000] dataUsingEncoding:NSUTF8StringEncoding]];
    //Adding image
    UIImage *image = [dictionary objectForKey:kUDKUserInfoAvatarFile];
    NSData* imdata = UIImagePNGRepresentation(image);
    [body appendData:imdata];
    
    for (NSString *key in dictionary.allKeys)
    {
        [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
        [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"\r\n\r\n%@", key, dictionary[key]] dataUsingEncoding:NSUTF8StringEncoding]];
    }
    
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"\r\n--%@--\r\n",boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    photoUploadRequest.HTTPBody = body;
    
    
    [photoUploadRequest addValue:@(body.length).stringValue forHTTPHeaderField: @"Content-Length"];
    NSHTTPURLResponse *photoRequestResponse = nil;
    NSError *photoRequestError = nil;
    
    NSData *res = [NSURLConnection sendSynchronousRequest:photoUploadRequest
                                        returningResponse:&photoRequestResponse
                                                    error:&photoRequestError];
    
    
    
    NSString *response = [[NSString alloc] initWithData:res encoding:NSUTF8StringEncoding];
    NSDictionary *ress = (NSDictionary *)[response JSONValue];
    
    
  callback(ress[@"file"][@"filepath"]);
    
    
}
/*!
 * Send Push notification 
 * @return:succeess
 1/0
 */
-(void)postPush:(NSString *)userId andMessage:(NSString *)message callback:(void (^)(NSString *))callback{
    
    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@%@",kServerMainPath,kRequestChatNotification]];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSString *requestFields = @"";
    NSLog(@"%@",[[UserDataManager sharedManager] serverToken]);
    requestFields = [requestFields stringByAppendingFormat:@"restToken=%@&",[[UserDataManager sharedManager] serverToken]];
    requestFields = [requestFields stringByAppendingFormat:@"uId=%@&",userId];
    requestFields = [requestFields stringByAppendingFormat:@"type=chat_message&"];
    requestFields = [requestFields stringByAppendingFormat:@"msg=%@",message];
    requestFields = [requestFields stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSData *requestData = [requestFields dataUsingEncoding:NSUTF8StringEncoding];
    request.HTTPBody = requestData;
    request.HTTPMethod = @"POST";
    request.timeoutInterval = kPfxNetworkDelay;
    NSHTTPURLResponse *response = nil;
    NSError *error = nil;
    NSData *responseData1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    NSString* responseString = [[NSString alloc] initWithData:responseData1 encoding:NSUTF8StringEncoding];
    if (error == nil && response.statusCode == 200)
    {
        
        NSLog(@"Interest saved with data\n%@",responseString);
    }
}

-(void)searchActivities:(NSString*)type orderBy:(NSString*)order andDirection:(NSString*)direction andSearchString:(NSString *)searchString callback:(void (^)(NSDictionary *))callback
{
    //TODO: get current time zone
    //[Flurry logEvent:@"Api Call : searchActivities"];
    NSString *req = [NSString stringWithFormat:@"%@/%@?restToken=%@&LimitFrom=0&limitTo=100&lat=%@&lng=%@&orderBy=%@&orderDiraction=%@&timeZone=%@&search=%@",
                     kServerMainPath,
                     type,
                     [[UserDataManager sharedManager] serverToken],
                     [[emsGlobalLocationServer sharedInstance] latitude],
                     [[emsGlobalLocationServer sharedInstance] longitude],
                     order,
                     direction,
                     [[NSTimeZone localTimeZone] name],
                     searchString];
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:req]
                                                           cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                                       timeoutInterval:kPfxNetworkDelay] ;
    
    [request setHTTPMethod: @"GET"];
    NSError *requestError;
    NSURLResponse *urlResponse = nil;
    NSData *response1 = [NSURLConnection sendSynchronousRequest:request returningResponse:&urlResponse error:&requestError];
    NSString* responseString = [[NSString alloc] initWithData:response1 encoding:NSUTF8StringEncoding] ;
    
    NSDictionary *res = [NSDictionary new];
    res = (NSDictionary *)[responseString JSONValue];
    NSLog(@"My Activities Dic: \n%@",res);
    
    callback(res);
    
}


@end


