
//Inside the TableView

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
NSString *CellIdentifier = [NSString stringWithFormat:@"Cell %d",indexPath.row];

progressCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
if (cell == nil) {
cell = [[progressCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier downloadURL:[NSURL URLWithString:[[data objectAtIndex:indexPath.row] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]];

[cell startWithDelegate:self];

}

return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
if (!self.detailViewController) {
self.detailViewController = [[SomeViewController alloc] initWithNibName:@"SomelViewController" bundle:nil];
}
progressCell* cell = (progressCell*)[tableView cellForRowAtIndexPath:indexPath];

if(cell.downloadedData!=nil) {
self.detailViewController.imageData = cell.downloadedData;
[self.navigationController pushViewController:self.detailViewController animated:YES];
}
else
{
if(cell.pause)
{
[cell downloadResume];
}
else
{
if([cell isAllowResume]) {
[cell downloadPause];
}

}
}
}


//////////Custom Table cell with progress if needed *header

#import <UIKit/UIKit.h>
#import "EMSImageDownloader.h"

@class progressCell;
@protocol progressCellDelegate<NSObject>
@required
-(void)progressCellDownloadProgress:(float)progress Percentage:(NSInteger)percentage ProgressCell:(progressCell*)cell;
-(void)progressCellDownloadFinished:(NSData*)fileData ProgressCell:(progressCell*)cell;
-(void)progressCellDownloadFail:(NSError*)error ProgressCell:(progressCell*)cell;
@end
@interface progressCell : UITableViewCell <EMSImageDownloaderDelegate>
@property (nonatomic,readonly) NSData *downloadedData;
@property (nonatomic,readonly) NSURL *downloadURL;
@property (nonatomic,strong) id<progressCellDelegate> delegate;
@property (nonatomic,assign) BOOL pause;
- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier downloadURL:(NSURL*)url;
-(void)startWithDelegate:(id<progressCellDelegate>)delegate;
-(void)downloadPause;
-(void)downloadResume;
-(BOOL)isAllowResume;
@end
//*!**************************************

.M

@interface progressCell()
@property (nonatomic, strong) EMSImageDownloader* download;
@property (nonatomic, strong) UIProgressView* progressV;
@end
@implementation progressCell
@synthesize downloadedData = _downloadedData;
@synthesize download = _download;
@synthesize progressV = _progressV;
@synthesize delegate = _delegate;
@synthesize downloadURL = _downloadURL;
@synthesize pause = _pause;

- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier downloadURL:(NSURL*)url {

self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
if (self) {
// Initialization code
_progressV = [[UIProgressView alloc] initWithProgressViewStyle:UIProgressViewStyleBar];
self.textLabel.text = @"0%";
self.accessoryView = _progressV;
_downloadedData = nil;
_downloadURL = url;
_pause = NO;
_download = [[SGdownloader alloc] initWithURL:url timeout:60];

}
return self;

}

-(void)startWithDelegate:(id<progressCellDelegate>)delegate
{
_delegate = delegate;
[_download startWithDelegate:self];
}

-(void)downloadPause {
[_download pause];
self.textLabel.text = @"Pause";
self.pause = YES;
}
-(void)downloadResume {
[_download resume];
self.textLabel.text = @"Resume...";
self.pause = NO;
}

- (void)setSelected:(BOOL)selected animated:(BOOL)animated
{
[super setSelected:selected animated:animated];

// Configure the view for the selected state
}
#pragma mark - DownloadProcess
-(void)EMSDownloadProgress:(float)progress Percentage:(NSInteger)percentage {

_progressV.progress = progress;

if([_delegate respondsToSelector:@selector(progressCellDownloadProgress:Percentage:ProgressCell:)]) {
[_delegate progressCellDownloadProgress:progress Percentage:percentage ProgressCell:self];
}

}
-(void)SGDownloadFinished:(NSData*)fileData {

_downloadedData = fileData;

if([_delegate respondsToSelector:@selector(progressCellDownloadFinished:ProgressCell:)])
{
[_delegate progressCellDownloadFinished:fileData ProgressCell:self];
}

}
-(void)EMSDownloadFail:(NSError*)error {

if([_delegate respondsToSelector:@selector(progressCellDownloadFail:ProgressCell:)])
{
[_delegate progressCellDownloadFail:error ProgressCell:self];
}

}

-(BOOL)isAllowResume
{
return _download.allowResume;
}
@end
//*!*************************
